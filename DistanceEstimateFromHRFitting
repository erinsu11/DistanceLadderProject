# Adapted from the tutorial code

import numpy as np # for maths 
import matplotlib # for plotting 
import matplotlib as mpl
import matplotlib.pyplot as plt
import os 
import pandas as pd # for manipulating large data tables

# Configure notebook for plotting
%matplotlib inline 
mpl.style.use('seaborn-colorblind') # colourblind friendly colour scheme

# Define default plot settings
matplotlib.rcParams['image.origin'] = 'lower'
matplotlib.rcParams['figure.figsize']=(8.0,6.0)  
matplotlib.rcParams['font.size']=16              
matplotlib.rcParams['savefig.dpi']= 300          

import warnings
warnings.filterwarnings('ignore')


# Directory 
ddir = '/Users/erinsullivan/Downloads/universe_6/'

# Reading CSV
stars = pd.read_csv(ddir+'Top/Star_Data.csv') 
print(stars.keys())

# There is a cluster located at around X = -31, Y = 8
centre = (-31, 8)
plt.scatter(stars.X,stars.Y)
plt.scatter(*centre,color='C2',marker='X') 
plt.xlabel('x (pix)')
plt.ylabel('y (pix)');


d = np.sqrt((stars.X-centre[0])** 2 + (stars.Y - centre[1])**2)
galaxy = stars[d<1] # Filter to only close ones
print(len(galaxy)) # Printing size 

# Defining log scales for magnitude
m0, m1, m2 = (np.log10(galaxy['BlueF']), 
              np.log10(galaxy['GreenF']), 
              np.log10(galaxy['RedF'])) 
colour = m2-m0

import glob # This package lets you search for filenames
import os

all_stars = glob.glob(ddir+'*/Star_Data.csv')

fig = plt.figure()

for j, catalog in enumerate(all_stars):
    try:
        this = pd.read_csv(catalog)
        
        thispar = this.Parallax
        thism0, thism1, thism2 = (np.log10(this.BlueF), 
                                  np.log10(this.GreenF), 
                                  np.log10(this.RedF))
        thiscolour = thism2-thism0
        dist = 1/thispar
        abs_mag = thism1 + 2*np.log10(dist) 
        mm = thispar>0.010 # Filtering out ones with bad SNRs
        
        h = plt.scatter(thiscolour[mm],abs_mag[mm],color='000000', alpha=0.2)
    except:
        pass

    
# HR diagram fitted to a single cluster 
s = plt.scatter(colour,m1+8.6,color='C3', alpha=0.5)

plt.ylabel('Log Flux 1')
plt.xlabel('Log Flux 2 - Log Flux 0')
plt.xlim([-1, 2.5])
plt.legend([h,s],['Benchmark','Cluster'])


# Calculating distance 
10**(np.array([8.5,8.8])/2)
